
internal_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b60  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dac  08003dac  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db4  08003db4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  08003de8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003de8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d698  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002080  00000000  00000000  0002d737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000882  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b765  00000000  00000000  00030b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea7f  00000000  00000000  0005c2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109d2e  00000000  00000000  0006ad2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cf4  00000000  00000000  00174a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00177750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003d04 	.word	0x08003d04

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000030 	.word	0x20000030
 80001f8:	08003d04 	.word	0x08003d04

080001fc <strcmp>:
 80001fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000204:	2a01      	cmp	r2, #1
 8000206:	bf28      	it	cs
 8000208:	429a      	cmpcs	r2, r3
 800020a:	d0f7      	beq.n	80001fc <strcmp>
 800020c:	1ad0      	subs	r0, r2, r3
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800050c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000510:	b088      	sub	sp, #32
 8000512:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000514:	f000 fa5b 	bl	80009ce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000518:	f000 f8b6 	bl	8000688 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051c:	f000 f952 	bl	80007c4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000520:	f000 f904 	bl	800072c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
    // Unlock flash memory untuk operasi tulis
    HAL_FLASH_Unlock();
 8000524:	f000 fc1a 	bl	8000d5c <HAL_FLASH_Unlock>

    // Menghapus halaman flash sebelum menulis
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000528:	4b52      	ldr	r3, [pc, #328]	; (8000674 <main+0x168>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page = (FLASH_USER_START_ADDR - FLASH_BASE) / FLASH_PAGE_SIZE;
 800052e:	4b51      	ldr	r3, [pc, #324]	; (8000674 <main+0x168>)
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	609a      	str	r2, [r3, #8]
    EraseInitStruct.NbPages = 1;
 8000534:	4b4f      	ldr	r3, [pc, #316]	; (8000674 <main+0x168>)
 8000536:	2201      	movs	r2, #1
 8000538:	60da      	str	r2, [r3, #12]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 800053a:	494f      	ldr	r1, [pc, #316]	; (8000678 <main+0x16c>)
 800053c:	484d      	ldr	r0, [pc, #308]	; (8000674 <main+0x168>)
 800053e:	f000 fcf3 	bl	8000f28 <HAL_FLASHEx_Erase>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d000      	beq.n	800054a <main+0x3e>
    {
        // Jika terjadi kesalahan dalam menghapus flash
        while (1);
 8000548:	e7fe      	b.n	8000548 <main+0x3c>
    }

    // Menulis string ke flash dalam blok 64-bit
    Address = FLASH_USER_START_ADDR;
 800054a:	4b4c      	ldr	r3, [pc, #304]	; (800067c <main+0x170>)
 800054c:	4a4c      	ldr	r2, [pc, #304]	; (8000680 <main+0x174>)
 800054e:	601a      	str	r2, [r3, #0]
    uint64_t data64 = 0;
 8000550:	f04f 0200 	mov.w	r2, #0
 8000554:	f04f 0300 	mov.w	r3, #0
 8000558:	e9c7 2300 	strd	r2, r3, [r7]
    size_t len = strlen(DATA_TO_WRITE);
 800055c:	231d      	movs	r3, #29
 800055e:	617b      	str	r3, [r7, #20]

    // Menulis string ke dalam flash per 8 byte (64-bit)
    for (size_t i = 0; i < len; i += 8)
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
 8000564:	e026      	b.n	80005b4 <main+0xa8>
    {
        // Ambil 8 byte dari string atau sisa byte jika kurang dari 8
        memcpy(&data64, &DATA_TO_WRITE[i], (len - i) >= 8 ? 8 : (len - i));
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	4a46      	ldr	r2, [pc, #280]	; (8000684 <main+0x178>)
 800056a:	1899      	adds	r1, r3, r2
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	2b08      	cmp	r3, #8
 8000574:	bf28      	it	cs
 8000576:	2308      	movcs	r3, #8
 8000578:	461a      	mov	r2, r3
 800057a:	463b      	mov	r3, r7
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fbb3 	bl	8003ce8 <memcpy>

        // Tulis blok 64-bit ke flash
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, data64) != HAL_OK)
 8000582:	4b3e      	ldr	r3, [pc, #248]	; (800067c <main+0x170>)
 8000584:	6819      	ldr	r1, [r3, #0]
 8000586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800058a:	2000      	movs	r0, #0
 800058c:	f000 fb7a 	bl	8000c84 <HAL_FLASH_Program>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d000      	beq.n	8000598 <main+0x8c>
        {
            // Jika terjadi kesalahan dalam menulis flash
            while (1);
 8000596:	e7fe      	b.n	8000596 <main+0x8a>
        }

        // Update alamat untuk blok berikutnya
        Address += 8;
 8000598:	4b38      	ldr	r3, [pc, #224]	; (800067c <main+0x170>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3308      	adds	r3, #8
 800059e:	4a37      	ldr	r2, [pc, #220]	; (800067c <main+0x170>)
 80005a0:	6013      	str	r3, [r2, #0]

        // Reset data64 untuk blok berikutnya
        data64 = 0;
 80005a2:	f04f 0200 	mov.w	r2, #0
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	e9c7 2300 	strd	r2, r3, [r7]
    for (size_t i = 0; i < len; i += 8)
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	3308      	adds	r3, #8
 80005b2:	61fb      	str	r3, [r7, #28]
 80005b4:	69fa      	ldr	r2, [r7, #28]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3d4      	bcc.n	8000566 <main+0x5a>
    }

    // Mengunci kembali flash memory setelah operasi
    HAL_FLASH_Lock();
 80005bc:	f000 fbf0 	bl	8000da0 <HAL_FLASH_Lock>

    // Membaca kembali data dari flash dan menampilkannya
    char read_data[len + 1];
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	1c59      	adds	r1, r3, #1
 80005c4:	460b      	mov	r3, r1
 80005c6:	3b01      	subs	r3, #1
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	2300      	movs	r3, #0
 80005cc:	4688      	mov	r8, r1
 80005ce:	4699      	mov	r9, r3
 80005d0:	f04f 0200 	mov.w	r2, #0
 80005d4:	f04f 0300 	mov.w	r3, #0
 80005d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005e4:	2300      	movs	r3, #0
 80005e6:	460c      	mov	r4, r1
 80005e8:	461d      	mov	r5, r3
 80005ea:	f04f 0200 	mov.w	r2, #0
 80005ee:	f04f 0300 	mov.w	r3, #0
 80005f2:	00eb      	lsls	r3, r5, #3
 80005f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005f8:	00e2      	lsls	r2, r4, #3
 80005fa:	1dcb      	adds	r3, r1, #7
 80005fc:	08db      	lsrs	r3, r3, #3
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	ebad 0d03 	sub.w	sp, sp, r3
 8000604:	466b      	mov	r3, sp
 8000606:	3300      	adds	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
    Address = FLASH_USER_START_ADDR;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <main+0x170>)
 800060c:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <main+0x174>)
 800060e:	601a      	str	r2, [r3, #0]

    // Membaca string dari flash dalam blok 64-bit
    for (size_t i = 0; i < len; i += 8)
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	e01b      	b.n	800064e <main+0x142>
    {
        // Baca 8 byte (64-bit) dari flash
        data64 = *(__IO uint64_t *)Address;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <main+0x170>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061e:	e9c7 2300 	strd	r2, r3, [r7]

        // Salin data ke buffer string
        memcpy(&read_data[i], &data64, (len - i) >= 8 ? 8 : (len - i));
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	18d0      	adds	r0, r2, r3
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b08      	cmp	r3, #8
 8000630:	bf28      	it	cs
 8000632:	2308      	movcs	r3, #8
 8000634:	461a      	mov	r2, r3
 8000636:	463b      	mov	r3, r7
 8000638:	4619      	mov	r1, r3
 800063a:	f003 fb55 	bl	8003ce8 <memcpy>

        // Update alamat untuk blok berikutnya
        Address += 8;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <main+0x170>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3308      	adds	r3, #8
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <main+0x170>)
 8000646:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; i < len; i += 8)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	3308      	adds	r3, #8
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	69ba      	ldr	r2, [r7, #24]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3df      	bcc.n	8000616 <main+0x10a>
    }

    // Pastikan string berakhir dengan null terminator
    read_data[len] = '\0';
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	4413      	add	r3, r2
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]

    // Verifikasi apakah string yang ditulis dan dibaca sama
    if (strcmp(read_data, DATA_TO_WRITE) == 0)
 8000660:	4908      	ldr	r1, [pc, #32]	; (8000684 <main+0x178>)
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f7ff fdca 	bl	80001fc <strcmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d000      	beq.n	8000670 <main+0x164>
        // Lakukan sesuatu, misalnya menghidupkan LED sebagai indikator
    }
    else
    {
        // Gagal menulis atau membaca data
        while (1);
 800066e:	e7fe      	b.n	800066e <main+0x162>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000670:	e7fe      	b.n	8000670 <main+0x164>
 8000672:	bf00      	nop
 8000674:	20000050 	.word	0x20000050
 8000678:	2000004c 	.word	0x2000004c
 800067c:	20000048 	.word	0x20000048
 8000680:	08080000 	.word	0x08080000
 8000684:	08003d1c 	.word	0x08003d1c

08000688 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b098      	sub	sp, #96	; 0x60
 800068c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2248      	movs	r2, #72	; 0x48
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fafa 	bl	8003c90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 ff50 	bl	8001550 <HAL_PWREx_ControlVoltageScaling>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x32>
			!= HAL_OK) {
		Error_Handler();
 80006b6:	f000 f89d 	bl	80007f4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ba:	2310      	movs	r3, #16
 80006bc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c6:	2360      	movs	r3, #96	; 0x60
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ce:	2301      	movs	r3, #1
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 60;
 80006d6:	233c      	movs	r3, #60	; 0x3c
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ffd4 	bl	8001698 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x72>
		Error_Handler();
 80006f6:	f000 f87d 	bl	80007f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2303      	movs	r3, #3
 8000700:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fc3c 	bl	8001f90 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9a>
		Error_Handler();
 800071e:	f000 f869 	bl	80007f4 <Error_Handler>
	}
}
 8000722:	bf00      	nop
 8000724:	3760      	adds	r7, #96	; 0x60
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000734:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_USART1_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_USART1_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART1_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000776:	f002 fc1d 	bl	8002fb4 <HAL_UART_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000780:	f000 f838 	bl	80007f4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000784:	2100      	movs	r1, #0
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_USART1_UART_Init+0x90>)
 8000788:	f003 f9b8 	bl	8003afc <HAL_UARTEx_SetTxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000792:	f000 f82f 	bl	80007f4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000796:	2100      	movs	r1, #0
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <MX_USART1_UART_Init+0x90>)
 800079a:	f003 f9ed 	bl	8003b78 <HAL_UARTEx_SetRxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80007a4:	f000 f826 	bl	80007f4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_USART1_UART_Init+0x90>)
 80007aa:	f003 f96e 	bl	8003a8a <HAL_UARTEx_DisableFifoMode>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80007b4:	f000 f81e 	bl	80007f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000060 	.word	0x20000060
 80007c0:	40013800 	.word	0x40013800

080007c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_GPIO_Init+0x2c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <MX_GPIO_Init+0x2c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_GPIO_Init+0x2c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	; 0x60
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	; 0x58
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0b0      	sub	sp, #192	; 0xc0
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2298      	movs	r2, #152	; 0x98
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fa11 	bl	8003c90 <memset>
  if(huart->Instance==USART1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a22      	ldr	r2, [pc, #136]	; (80008fc <HAL_UART_MspInit+0xb4>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d13c      	bne.n	80008f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000878:	2301      	movs	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800087c:	2300      	movs	r3, #0
 800087e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fe41 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000890:	f7ff ffb0 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <HAL_UART_MspInit+0xb8>)
 8000896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_UART_MspInit+0xb8>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6613      	str	r3, [r2, #96]	; 0x60
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0xb8>)
 80008a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_UART_MspInit+0xb8>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <HAL_UART_MspInit+0xb8>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0xb8>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008de:	2307      	movs	r3, #7
 80008e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fc7d 	bl	80011ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	37c0      	adds	r7, #192	; 0xc0
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40013800 	.word	0x40013800
 8000900:	40021000 	.word	0x40021000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f892 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 f979 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ae:	f7ff fdad 	bl	800050c <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80009c0:	08003dbc 	.word	0x08003dbc
  ldr r2, =_sbss
 80009c4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80009c8:	200000f8 	.word	0x200000f8

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>

080009ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f91f 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f80e 	bl	8000a00 <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	e001      	b.n	80009f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f0:	f7ff ff06 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d023      	beq.n	8000a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_InitTick+0x70>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f91d 	bl	8000c6a <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10f      	bne.n	8000a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d809      	bhi.n	8000a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f8f5 	bl	8000c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_InitTick+0x74>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e004      	b.n	8000a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e001      	b.n	8000a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	200000f4 	.word	0x200000f4

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000f4 	.word	0x200000f4

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff47 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff5c 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffb0 	bl	8000bd8 <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <HAL_FLASH_Program+0xd0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d101      	bne.n	8000ca2 <HAL_FLASH_Program+0x1e>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e053      	b.n	8000d4a <HAL_FLASH_Program+0xc6>
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <HAL_FLASH_Program+0xd0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cac:	f000 f888 	bl	8000dc0 <FLASH_WaitForLastOperation>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d143      	bne.n	8000d42 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_FLASH_Program+0xd0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <HAL_FLASH_Program+0xd4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d009      	beq.n	8000ce0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_FLASH_Program+0xd4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_FLASH_Program+0xd4>)
 8000cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_FLASH_Program+0xd0>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	771a      	strb	r2, [r3, #28]
 8000cde:	e002      	b.n	8000ce6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_FLASH_Program+0xd0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d107      	bne.n	8000cfc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf0:	68b8      	ldr	r0, [r7, #8]
 8000cf2:	f000 f8bd 	bl	8000e70 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	e010      	b.n	8000d1e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d002      	beq.n	8000d08 <HAL_FLASH_Program+0x84>
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d10a      	bne.n	8000d1e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	68b8      	ldr	r0, [r7, #8]
 8000d0e:	f000 f8d5 	bl	8000ebc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d102      	bne.n	8000d1e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000d18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d1c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d22:	f000 f84d 	bl	8000dc0 <FLASH_WaitForLastOperation>
 8000d26:	4603      	mov	r3, r0
 8000d28:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_FLASH_Program+0xd4>)
 8000d32:	695a      	ldr	r2, [r3, #20]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <HAL_FLASH_Program+0xd4>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000d3e:	f000 fa0b 	bl	8001158 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <HAL_FLASH_Program+0xd0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

  return status;
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	da0b      	bge.n	8000d86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_FLASH_Unlock+0x3c>)
 8000d72:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <HAL_FLASH_Unlock+0x40>)
 8000d78:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da01      	bge.n	8000d86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40022000 	.word	0x40022000
 8000d98:	45670123 	.word	0x45670123
 8000d9c:	cdef89ab 	.word	0xcdef89ab

08000da0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_FLASH_Lock+0x1c>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_FLASH_Lock+0x1c>)
 8000daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dae:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff fe6a 	bl	8000aa0 <HAL_GetTick>
 8000dcc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000dce:	e00d      	b.n	8000dec <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd6:	d009      	beq.n	8000dec <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8000dd8:	f7ff fe62 	bl	8000aa0 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d801      	bhi.n	8000dec <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e036      	b.n	8000e5a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <FLASH_WaitForLastOperation+0xa4>)
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1eb      	bne.n	8000dd0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <FLASH_WaitForLastOperation+0xa4>)
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <FLASH_WaitForLastOperation+0xa8>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d01e      	beq.n	8000e46 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <FLASH_WaitForLastOperation+0xac>)
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <FLASH_WaitForLastOperation+0xac>)
 8000e12:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <FLASH_WaitForLastOperation+0x6e>
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <FLASH_WaitForLastOperation+0xa4>)
 8000e20:	699a      	ldr	r2, [r3, #24]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000e28:	490e      	ldr	r1, [pc, #56]	; (8000e64 <FLASH_WaitForLastOperation+0xa4>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	618b      	str	r3, [r1, #24]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d004      	beq.n	8000e42 <FLASH_WaitForLastOperation+0x82>
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <FLASH_WaitForLastOperation+0xa4>)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e40:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e009      	b.n	8000e5a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <FLASH_WaitForLastOperation+0xa4>)
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <FLASH_WaitForLastOperation+0xa4>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000
 8000e68:	0002c3fa 	.word	0x0002c3fa
 8000e6c:	2000000c 	.word	0x2000000c

08000e70 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <FLASH_Program_DoubleWord+0x48>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <FLASH_Program_DoubleWord+0x48>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000e8e:	f3bf 8f6f 	isb	sy
}
 8000e92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	000a      	movs	r2, r1
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	68f9      	ldr	r1, [r7, #12]
 8000ea6:	3104      	adds	r1, #4
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40022000 	.word	0x40022000

08000ebc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <FLASH_Program_Fast+0x68>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <FLASH_Program_Fast+0x68>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ede:	f3ef 8310 	mrs	r3, PRIMASK
 8000ee2:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ee4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3304      	adds	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
    row_index--;
 8000f00:	7ffb      	ldrb	r3, [r7, #31]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8000f06:	7ffb      	ldrb	r3, [r7, #31]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1ef      	bne.n	8000eec <FLASH_Program_Fast+0x30>
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f383 8810 	msr	PRIMASK, r3
}
 8000f16:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8000f18:	bf00      	nop
 8000f1a:	3724      	adds	r7, #36	; 0x24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f32:	4b49      	ldr	r3, [pc, #292]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d101      	bne.n	8000f3e <HAL_FLASHEx_Erase+0x16>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e087      	b.n	800104e <HAL_FLASHEx_Erase+0x126>
 8000f3e:	4b46      	ldr	r3, [pc, #280]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f48:	f7ff ff3a 	bl	8000dc0 <FLASH_WaitForLastOperation>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d177      	bne.n	8001046 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f56:	4b40      	ldr	r3, [pc, #256]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000f68:	4b3c      	ldr	r3, [pc, #240]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d009      	beq.n	8000f88 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a38      	ldr	r2, [pc, #224]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f7e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8000f82:	2203      	movs	r2, #3
 8000f84:	771a      	strb	r2, [r3, #28]
 8000f86:	e016      	b.n	8000fb6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	771a      	strb	r2, [r3, #28]
 8000f8e:	e012      	b.n	8000fb6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d009      	beq.n	8000fb0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2e      	ldr	r2, [pc, #184]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	771a      	strb	r2, [r3, #28]
 8000fae:	e002      	b.n	8000fb6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d113      	bne.n	8000fe6 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f84c 	bl	8001060 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fcc:	f7ff fef8 	bl	8000dc0 <FLASH_WaitForLastOperation>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8000fda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fde:	f023 0304 	bic.w	r3, r3, #4
 8000fe2:	6153      	str	r3, [r2, #20]
 8000fe4:	e02d      	b.n	8001042 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	e01d      	b.n	8001032 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f000 f867 	bl	80010d0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001002:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001006:	f7ff fedb 	bl	8000dc0 <FLASH_WaitForLastOperation>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_FLASHEx_Erase+0x134>)
 8001014:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001018:	f023 0302 	bic.w	r3, r3, #2
 800101c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	601a      	str	r2, [r3, #0]
          break;
 800102a:	e00a      	b.n	8001042 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3301      	adds	r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	4413      	add	r3, r2
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3d9      	bcc.n	8000ff6 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001042:	f000 f889 	bl	8001158 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_FLASHEx_Erase+0x130>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000000c 	.word	0x2000000c
 800105c:	40022000 	.word	0x40022000

08001060 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <FLASH_MassErase+0x6c>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d016      	beq.n	80010a2 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <FLASH_MassErase+0x6c>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <FLASH_MassErase+0x6c>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00e      	beq.n	80010b2 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <FLASH_MassErase+0x6c>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <FLASH_MassErase+0x6c>)
 800109a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800109e:	6153      	str	r3, [r2, #20]
 80010a0:	e007      	b.n	80010b2 <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <FLASH_MassErase+0x6c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <FLASH_MassErase+0x6c>)
 80010a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <FLASH_MassErase+0x6c>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <FLASH_MassErase+0x6c>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010bc:	6153      	str	r3, [r2, #20]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000

080010d0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <FLASH_PageErase+0x84>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <FLASH_PageErase+0x84>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <FLASH_PageErase+0x84>)
 80010ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	e011      	b.n	8001118 <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <FLASH_PageErase+0x84>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <FLASH_PageErase+0x84>)
 8001104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	e005      	b.n	8001118 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <FLASH_PageErase+0x84>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	4a10      	ldr	r2, [pc, #64]	; (8001154 <FLASH_PageErase+0x84>)
 8001112:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001116:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <FLASH_PageErase+0x84>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001128:	490a      	ldr	r1, [pc, #40]	; (8001154 <FLASH_PageErase+0x84>)
 800112a:	4313      	orrs	r3, r2
 800112c:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <FLASH_PageErase+0x84>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <FLASH_PageErase+0x84>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <FLASH_PageErase+0x84>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <FLASH_PageErase+0x84>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6153      	str	r3, [r2, #20]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000

08001158 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <FLASH_FlushCaches+0x8c>)
 8001160:	7f1b      	ldrb	r3, [r3, #28]
 8001162:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <FLASH_FlushCaches+0x18>
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d117      	bne.n	80011a0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <FLASH_FlushCaches+0x90>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <FLASH_FlushCaches+0x90>)
 8001176:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <FLASH_FlushCaches+0x90>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <FLASH_FlushCaches+0x90>)
 8001182:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <FLASH_FlushCaches+0x90>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <FLASH_FlushCaches+0x90>)
 800118e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001192:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <FLASH_FlushCaches+0x90>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <FLASH_FlushCaches+0x90>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d002      	beq.n	80011ac <FLASH_FlushCaches+0x54>
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d111      	bne.n	80011d0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <FLASH_FlushCaches+0x90>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <FLASH_FlushCaches+0x90>)
 80011b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <FLASH_FlushCaches+0x90>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <FLASH_FlushCaches+0x90>)
 80011be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <FLASH_FlushCaches+0x90>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <FLASH_FlushCaches+0x90>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ce:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <FLASH_FlushCaches+0x8c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	771a      	strb	r2, [r3, #28]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	e166      	b.n	80014ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2101      	movs	r1, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8158 	beq.w	80014c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d005      	beq.n	800122c <HAL_GPIO_Init+0x40>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d130      	bne.n	800128e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001262:	2201      	movs	r2, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 0201 	and.w	r2, r3, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b03      	cmp	r3, #3
 8001298:	d017      	beq.n	80012ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d123      	bne.n	800131e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	6939      	ldr	r1, [r7, #16]
 800131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0203 	and.w	r2, r3, #3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80b2 	beq.w	80014c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001360:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <HAL_GPIO_Init+0x2fc>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	4a60      	ldr	r2, [pc, #384]	; (80014e8 <HAL_GPIO_Init+0x2fc>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6613      	str	r3, [r2, #96]	; 0x60
 800136c:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <HAL_GPIO_Init+0x2fc>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001378:	4a5c      	ldr	r2, [pc, #368]	; (80014ec <HAL_GPIO_Init+0x300>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a2:	d02b      	beq.n	80013fc <HAL_GPIO_Init+0x210>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x304>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d025      	beq.n	80013f8 <HAL_GPIO_Init+0x20c>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_GPIO_Init+0x308>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d01f      	beq.n	80013f4 <HAL_GPIO_Init+0x208>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d019      	beq.n	80013f0 <HAL_GPIO_Init+0x204>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a4f      	ldr	r2, [pc, #316]	; (80014fc <HAL_GPIO_Init+0x310>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_GPIO_Init+0x200>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a4e      	ldr	r2, [pc, #312]	; (8001500 <HAL_GPIO_Init+0x314>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00d      	beq.n	80013e8 <HAL_GPIO_Init+0x1fc>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <HAL_GPIO_Init+0x318>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_Init+0x1f8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <HAL_GPIO_Init+0x31c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_GPIO_Init+0x1f4>
 80013dc:	2307      	movs	r3, #7
 80013de:	e00e      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013e0:	2308      	movs	r3, #8
 80013e2:	e00c      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013e4:	2306      	movs	r3, #6
 80013e6:	e00a      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013e8:	2305      	movs	r3, #5
 80013ea:	e008      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x212>
 80013fc:	2300      	movs	r3, #0
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140e:	4937      	ldr	r1, [pc, #220]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141c:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_GPIO_Init+0x320>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001440:	4a32      	ldr	r2, [pc, #200]	; (800150c <HAL_GPIO_Init+0x320>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_GPIO_Init+0x320>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800146a:	4a28      	ldr	r2, [pc, #160]	; (800150c <HAL_GPIO_Init+0x320>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001470:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_GPIO_Init+0x320>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_GPIO_Init+0x320>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_GPIO_Init+0x320>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014be:	4a13      	ldr	r2, [pc, #76]	; (800150c <HAL_GPIO_Init+0x320>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f ae91 	bne.w	80011fc <HAL_GPIO_Init+0x10>
  }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800
 80014f8:	48000c00 	.word	0x48000c00
 80014fc:	48001000 	.word	0x48001000
 8001500:	48001400 	.word	0x48001400
 8001504:	48001800 	.word	0x48001800
 8001508:	48001c00 	.word	0x48001c00
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001520:	d102      	bne.n	8001528 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001526:	e00b      	b.n	8001540 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_PWREx_GetVoltageRange+0x3c>)
 800152a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001536:	d102      	bne.n	800153e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	e000      	b.n	8001540 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800153e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d141      	bne.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800155e:	4b4b      	ldr	r3, [pc, #300]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156a:	d131      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800156c:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001572:	4a46      	ldr	r2, [pc, #280]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001584:	4a41      	ldr	r2, [pc, #260]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2232      	movs	r2, #50	; 0x32
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	4a3f      	ldr	r2, [pc, #252]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a2:	e002      	b.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d102      	bne.n	80015be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f2      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ca:	d158      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e057      	b.n	8001680 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d6:	4a2d      	ldr	r2, [pc, #180]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015e0:	e04d      	b.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e8:	d141      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f6:	d131      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001610:	4a1e      	ldr	r2, [pc, #120]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2232      	movs	r2, #50	; 0x32
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162e:	e002      	b.n	8001636 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3b01      	subs	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d102      	bne.n	800164a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f2      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001656:	d112      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e011      	b.n	8001680 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800166c:	e007      	b.n	800167e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40007000 	.word	0x40007000
 8001690:	20000000 	.word	0x20000000
 8001694:	431bde83 	.word	0x431bde83

08001698 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f000 bc68 	b.w	8001f7c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ac:	4b97      	ldr	r3, [pc, #604]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b6:	4b95      	ldr	r3, [pc, #596]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80e6 	beq.w	800189a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4c>
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	f040 808d 	bne.w	80017f6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f040 8089 	bne.w	80017f6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016e4:	4b89      	ldr	r3, [pc, #548]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_RCC_OscConfig+0x66>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f000 bc3f 	b.w	8001f7c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d004      	beq.n	8001718 <HAL_RCC_OscConfig+0x80>
 800170e:	4b7f      	ldr	r3, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001716:	e005      	b.n	8001724 <HAL_RCC_OscConfig+0x8c>
 8001718:	4b7c      	ldr	r3, [pc, #496]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001724:	4293      	cmp	r3, r2
 8001726:	d224      	bcs.n	8001772 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fe2d 	bl	800238c <RCC_SetFlashLatencyFromMSIRange>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f000 bc1f 	b.w	8001f7c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173e:	4b73      	ldr	r3, [pc, #460]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a72      	ldr	r2, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b70      	ldr	r3, [pc, #448]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	496d      	ldr	r1, [pc, #436]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	4968      	ldr	r1, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e025      	b.n	80017be <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001772:	4b66      	ldr	r3, [pc, #408]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a65      	ldr	r2, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	4960      	ldr	r1, [pc, #384]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001790:	4b5e      	ldr	r3, [pc, #376]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	495b      	ldr	r1, [pc, #364]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fdec 	bl	800238c <RCC_SetFlashLatencyFromMSIRange>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e3de      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017be:	f000 fd21 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	4950      	ldr	r1, [pc, #320]	; (8001910 <HAL_RCC_OscConfig+0x278>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	4a4e      	ldr	r2, [pc, #312]	; (8001914 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017de:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <HAL_RCC_OscConfig+0x280>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f90c 	bl	8000a00 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d052      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	e3c2      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d032      	beq.n	8001864 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a42      	ldr	r2, [pc, #264]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800180a:	f7ff f949 	bl	8000aa0 <HAL_GetTick>
 800180e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001812:	f7ff f945 	bl	8000aa0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e3ab      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a35      	ldr	r2, [pc, #212]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	4930      	ldr	r1, [pc, #192]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	492b      	ldr	r1, [pc, #172]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	e01a      	b.n	800189a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a28      	ldr	r2, [pc, #160]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001870:	f7ff f916 	bl	8000aa0 <HAL_GetTick>
 8001874:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001878:	f7ff f912 	bl	8000aa0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e378      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1e0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d073      	beq.n	800198e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x220>
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d10e      	bne.n	80018d0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d10b      	bne.n	80018d0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d063      	beq.n	800198c <HAL_RCC_OscConfig+0x2f4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d15f      	bne.n	800198c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e355      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d106      	bne.n	80018e8 <HAL_RCC_OscConfig+0x250>
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e025      	b.n	8001934 <HAL_RCC_OscConfig+0x29c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	d114      	bne.n	800191c <HAL_RCC_OscConfig+0x284>
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a02      	ldr	r2, [pc, #8]	; (800190c <HAL_RCC_OscConfig+0x274>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e013      	b.n	8001934 <HAL_RCC_OscConfig+0x29c>
 800190c:	40021000 	.word	0x40021000
 8001910:	08003d3c 	.word	0x08003d3c
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004
 800191c:	4b8f      	ldr	r3, [pc, #572]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a8e      	ldr	r2, [pc, #568]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b8c      	ldr	r3, [pc, #560]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a8b      	ldr	r2, [pc, #556]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f8b0 	bl	8000aa0 <HAL_GetTick>
 8001940:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff f8ac 	bl	8000aa0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e312      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001956:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x2ac>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f89c 	bl	8000aa0 <HAL_GetTick>
 8001968:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff f898 	bl	8000aa0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e2fe      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800197e:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x2d4>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d060      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d005      	beq.n	80019ac <HAL_RCC_OscConfig+0x314>
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d119      	bne.n	80019da <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d116      	bne.n	80019da <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	4b6b      	ldr	r3, [pc, #428]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_OscConfig+0x32c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e2db      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	4962      	ldr	r1, [pc, #392]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d8:	e040      	b.n	8001a5c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d023      	beq.n	8001a2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e2:	4b5e      	ldr	r3, [pc, #376]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5d      	ldr	r2, [pc, #372]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff f857 	bl	8000aa0 <HAL_GetTick>
 80019f2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff f853 	bl	8000aa0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e2b9      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a08:	4b54      	ldr	r3, [pc, #336]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	494e      	ldr	r1, [pc, #312]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a4b      	ldr	r2, [pc, #300]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f833 	bl	8000aa0 <HAL_GetTick>
 8001a3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff f82f 	bl	8000aa0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e295      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8082 	beq.w	8001b6e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d05f      	beq.n	8001b32 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a78:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d037      	beq.n	8001af8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e26d      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aba:	f7fe fff1 	bl	8000aa0 <HAL_GetTick>
 8001abe:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7fe ffed 	bl	8000aa0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b11      	cmp	r3, #17
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e253      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ef      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	f023 0210 	bic.w	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	491a      	ldr	r1, [pc, #104]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7fe ffca 	bl	8000aa0 <HAL_GetTick>
 8001b0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7fe ffc6 	bl	8000aa0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e22c      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ef      	beq.n	8001b10 <HAL_RCC_OscConfig+0x478>
 8001b30:	e01d      	b.n	8001b6e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7fe ffad 	bl	8000aa0 <HAL_GetTick>
 8001b46:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7fe ffa9 	bl	8000aa0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b11      	cmp	r3, #17
 8001b56:	d903      	bls.n	8001b60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e20f      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
 8001b5c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b60:	4b83      	ldr	r3, [pc, #524]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ed      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80bd 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10e      	bne.n	8001bac <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9a:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	4b71      	ldr	r3, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x6dc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d118      	bne.n	8001bea <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb8:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x6dc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6d      	ldr	r2, [pc, #436]	; (8001d74 <HAL_RCC_OscConfig+0x6dc>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc4:	f7fe ff6c 	bl	8000aa0 <HAL_GetTick>
 8001bc8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7fe ff68 	bl	8000aa0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1ce      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_OscConfig+0x6dc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d02c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001bf6:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	4959      	ldr	r1, [pc, #356]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d010      	beq.n	8001c3e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c1c:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a53      	ldr	r2, [pc, #332]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a4f      	ldr	r2, [pc, #316]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	e018      	b.n	8001c70 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	4a4a      	ldr	r2, [pc, #296]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4e:	e00f      	b.n	8001c70 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c50:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	4a46      	ldr	r2, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d016      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7fe ff12 	bl	8000aa0 <HAL_GetTick>
 8001c7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c80:	f7fe ff0e 	bl	8000aa0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e172      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ed      	beq.n	8001c80 <HAL_RCC_OscConfig+0x5e8>
 8001ca4:	e01d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7fe fefb 	bl	8000aa0 <HAL_GetTick>
 8001caa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7fe fef7 	bl	8000aa0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e15b      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ed      	bne.n	8001cae <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd8:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d041      	beq.n	8001d86 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fec1 	bl	8000aa0 <HAL_GetTick>
 8001d1e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d22:	f7fe febd 	bl	8000aa0 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e123      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ef      	beq.n	8001d22 <HAL_RCC_OscConfig+0x68a>
 8001d42:	e020      	b.n	8001d86 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x6d8>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7fe fea4 	bl	8000aa0 <HAL_GetTick>
 8001d58:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d5a:	e00d      	b.n	8001d78 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5c:	f7fe fea0 	bl	8000aa0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d906      	bls.n	8001d78 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e106      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d78:	4b82      	ldr	r3, [pc, #520]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ea      	bne.n	8001d5c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80f5 	beq.w	8001f7a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	f040 80cb 	bne.w	8001f30 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d9a:	4b7a      	ldr	r3, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0203 	and.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d12c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	3b01      	subs	r3, #1
 8001dba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d123      	bne.n	8001e08 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d11b      	bne.n	8001e08 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d113      	bne.n	8001e08 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	3b01      	subs	r3, #1
 8001dee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d109      	bne.n	8001e08 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	085b      	lsrs	r3, r3, #1
 8001e00:	3b01      	subs	r3, #1
 8001e02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d06d      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d068      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0a8      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a55      	ldr	r2, [pc, #340]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e36:	f7fe fe33 	bl	8000aa0 <HAL_GetTick>
 8001e3a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe fe2f 	bl	8000aa0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e095      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_RCC_OscConfig+0x8f0>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e76:	0212      	lsls	r2, r2, #8
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e7e:	0852      	lsrs	r2, r2, #1
 8001e80:	3a01      	subs	r2, #1
 8001e82:	0552      	lsls	r2, r2, #21
 8001e84:	4311      	orrs	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e8a:	0852      	lsrs	r2, r2, #1
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	0652      	lsls	r2, r2, #25
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e96:	06d2      	lsls	r2, r2, #27
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	493a      	ldr	r1, [pc, #232]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a34      	ldr	r2, [pc, #208]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb8:	f7fe fdf2 	bl	8000aa0 <HAL_GetTick>
 8001ebc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fdee 	bl	8000aa0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e054      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ede:	e04c      	b.n	8001f7a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e04b      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d144      	bne.n	8001f7a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f08:	f7fe fdca 	bl	8000aa0 <HAL_GetTick>
 8001f0c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe fdc6 	bl	8000aa0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e02c      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x878>
 8001f2e:	e024      	b.n	8001f7a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d01f      	beq.n	8001f76 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe fdad 	bl	8000aa0 <HAL_GetTick>
 8001f46:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe fda9 	bl	8000aa0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	4905      	ldr	r1, [pc, #20]	; (8001f84 <HAL_RCC_OscConfig+0x8ec>)
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCC_OscConfig+0x8f4>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
 8001f74:	e001      	b.n	8001f7a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	019d800c 	.word	0x019d800c
 8001f8c:	feeefffc 	.word	0xfeeefffc

08001f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e11d      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b90      	ldr	r3, [pc, #576]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b8d      	ldr	r3, [pc, #564]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 020f 	bic.w	r2, r3, #15
 8001fbe:	498b      	ldr	r1, [pc, #556]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b89      	ldr	r3, [pc, #548]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e105      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d908      	bls.n	8002006 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	497b      	ldr	r1, [pc, #492]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d079      	beq.n	8002106 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d11e      	bne.n	8002058 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0dc      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800202a:	f000 fa09 	bl	8002440 <RCC_GetSysClockFreqFromPLLSource>
 800202e:	4603      	mov	r3, r0
 8002030:	4a70      	ldr	r2, [pc, #448]	; (80021f4 <HAL_RCC_ClockConfig+0x264>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d946      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d140      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002042:	4b6b      	ldr	r3, [pc, #428]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800204a:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e035      	b.n	80020c4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d107      	bne.n	8002070 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d115      	bne.n	8002098 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b9      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002078:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0ad      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0a5      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002098:	f000 f8b4 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 800209c:	4603      	mov	r3, r0
 800209e:	4a55      	ldr	r2, [pc, #340]	; (80021f4 <HAL_RCC_ClockConfig+0x264>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d90f      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b8:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80020ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020be:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c4:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 0203 	bic.w	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4947      	ldr	r1, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d6:	f7fe fce3 	bl	8000aa0 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fcdf 	bl	8000aa0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e077      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f4:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 020c 	and.w	r2, r3, #12
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	429a      	cmp	r2, r3
 8002104:	d1eb      	bne.n	80020de <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b80      	cmp	r3, #128	; 0x80
 800210a:	d105      	bne.n	8002118 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800210c:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a37      	ldr	r2, [pc, #220]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002116:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002130:	429a      	cmp	r2, r3
 8002132:	d208      	bcs.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	492b      	ldr	r1, [pc, #172]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d210      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 020f 	bic.w	r2, r3, #15
 800215c:	4923      	ldr	r1, [pc, #140]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCC_ClockConfig+0x25c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e036      	b.n	80021e4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4918      	ldr	r1, [pc, #96]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4910      	ldr	r1, [pc, #64]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021b4:	f000 f826 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCC_ClockConfig+0x260>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <HAL_RCC_ClockConfig+0x268>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x26c>)
 80021d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fc11 	bl	8000a00 <HAL_InitTick>
 80021de:	4603      	mov	r3, r0
 80021e0:	73fb      	strb	r3, [r7, #15]

  return status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	04c4b400 	.word	0x04c4b400
 80021f8:	08003d3c 	.word	0x08003d3c
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x34>
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d121      	bne.n	8002276 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d11e      	bne.n	8002276 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002238:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e005      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002268:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002274:	e00a      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d102      	bne.n	8002282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_RCC_GetSysClockFreq+0x110>)
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	e004      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d101      	bne.n	800228c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_RCC_GetSysClockFreq+0x114>)
 800228a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d134      	bne.n	80022fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0xa6>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d003      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0xac>
 80022a8:	e005      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ac:	617b      	str	r3, [r7, #20]
      break;
 80022ae:	e005      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_GetSysClockFreq+0x114>)
 80022b2:	617b      	str	r3, [r7, #20]
      break;
 80022b4:	e002      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	617b      	str	r3, [r7, #20]
      break;
 80022ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3301      	adds	r3, #1
 80022c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_RCC_GetSysClockFreq+0x108>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	0e5b      	lsrs	r3, r3, #25
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	3301      	adds	r3, #1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022fc:	69bb      	ldr	r3, [r7, #24]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	08003d54 	.word	0x08003d54
 8002314:	00f42400 	.word	0x00f42400
 8002318:	007a1200 	.word	0x007a1200

0800231c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_GetHCLKFreq+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000000 	.word	0x20000000

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002338:	f7ff fff0 	bl	800231c <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4904      	ldr	r1, [pc, #16]	; (800235c <HAL_RCC_GetPCLK1Freq+0x28>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08003d4c 	.word	0x08003d4c

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002364:	f7ff ffda 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0adb      	lsrs	r3, r3, #11
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4904      	ldr	r1, [pc, #16]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	08003d4c 	.word	0x08003d4c

0800238c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023a4:	f7ff f8b4 	bl	8001510 <HAL_PWREx_GetVoltageRange>
 80023a8:	6178      	str	r0, [r7, #20]
 80023aa:	e014      	b.n	80023d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6593      	str	r3, [r2, #88]	; 0x58
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023c4:	f7ff f8a4 	bl	8001510 <HAL_PWREx_GetVoltageRange>
 80023c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d10b      	bne.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d913      	bls.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2ba0      	cmp	r3, #160	; 0xa0
 80023e8:	d902      	bls.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ea:	2302      	movs	r3, #2
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	e00d      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	e00a      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b7f      	cmp	r3, #127	; 0x7f
 80023fa:	d902      	bls.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023fc:	2302      	movs	r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e004      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b70      	cmp	r3, #112	; 0x70
 8002406:	d101      	bne.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002408:	2301      	movs	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 020f 	bic.w	r2, r3, #15
 8002414:	4909      	ldr	r1, [pc, #36]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	40022000 	.word	0x40022000

08002440 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d00b      	beq.n	800246e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d825      	bhi.n	80024a8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d008      	beq.n	8002474 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d11f      	bne.n	80024a8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800246a:	613b      	str	r3, [r7, #16]
    break;
 800246c:	e01f      	b.n	80024ae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800246e:	4b25      	ldr	r3, [pc, #148]	; (8002504 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002470:	613b      	str	r3, [r7, #16]
    break;
 8002472:	e01c      	b.n	80024ae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e005      	b.n	800249c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800249c:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	613b      	str	r3, [r7, #16]
    break;
 80024a6:	e002      	b.n	80024ae <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
    break;
 80024ac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	3301      	adds	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	fb03 f202 	mul.w	r2, r3, r2
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0e5b      	lsrs	r3, r3, #25
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024ee:	683b      	ldr	r3, [r7, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000
 8002500:	00f42400 	.word	0x00f42400
 8002504:	007a1200 	.word	0x007a1200
 8002508:	08003d54 	.word	0x08003d54

0800250c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002514:	2300      	movs	r3, #0
 8002516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002518:	2300      	movs	r3, #0
 800251a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d040      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d02a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002530:	2b80      	cmp	r3, #128	; 0x80
 8002532:	d825      	bhi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002534:	2b60      	cmp	r3, #96	; 0x60
 8002536:	d026      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002538:	2b60      	cmp	r3, #96	; 0x60
 800253a:	d821      	bhi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d006      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d81d      	bhi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d010      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800254c:	e018      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	4a88      	ldr	r2, [pc, #544]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800255a:	e015      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3304      	adds	r3, #4
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fb3e 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800256c:	e00c      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3320      	adds	r3, #32
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fc29 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 800257a:	4603      	mov	r3, r0
 800257c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800257e:	e003      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	74fb      	strb	r3, [r7, #19]
      break;
 8002584:	e000      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800258e:	4b79      	ldr	r3, [pc, #484]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002590:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002594:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259c:	4975      	ldr	r1, [pc, #468]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80025a4:	e001      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d047      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d030      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d82a      	bhi.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ca:	d02a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025d0:	d824      	bhi.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025dc:	d81e      	bhi.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	d010      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025e8:	e018      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ea:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a61      	ldr	r2, [pc, #388]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f6:	e015      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 faf0 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002608:	e00c      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3320      	adds	r3, #32
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fbdb 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800261a:	e003      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	74fb      	strb	r3, [r7, #19]
      break;
 8002620:	e000      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800262a:	4b52      	ldr	r3, [pc, #328]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800262c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	494e      	ldr	r1, [pc, #312]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002640:	e001      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 809f 	beq.w	8002792 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	4a40      	ldr	r2, [pc, #256]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6593      	str	r3, [r2, #88]	; 0x58
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3a      	ldr	r2, [pc, #232]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002696:	f7fe fa03 	bl	8000aa0 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800269c:	e009      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe f9ff 	bl	8000aa0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d902      	bls.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	74fb      	strb	r3, [r7, #19]
        break;
 80026b0:	e005      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ef      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d15b      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01f      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d019      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d016      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe f9be 	bl	8000aa0 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002726:	e00b      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe f9ba 	bl	8000aa0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d902      	bls.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	74fb      	strb	r3, [r7, #19]
            break;
 800273e:	e006      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ec      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	4903      	ldr	r1, [pc, #12]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800276c:	e008      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	74bb      	strb	r3, [r7, #18]
 8002772:	e005      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002774:	40021000 	.word	0x40021000
 8002778:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002780:	7c7b      	ldrb	r3, [r7, #17]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d105      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4ba0      	ldr	r3, [pc, #640]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	4a9f      	ldr	r2, [pc, #636]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002790:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800279e:	4b9a      	ldr	r3, [pc, #616]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 0203 	bic.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	4996      	ldr	r1, [pc, #600]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c0:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f023 020c 	bic.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	498e      	ldr	r1, [pc, #568]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027e2:	4b89      	ldr	r3, [pc, #548]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	4985      	ldr	r1, [pc, #532]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002804:	4b80      	ldr	r3, [pc, #512]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002812:	497d      	ldr	r1, [pc, #500]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002826:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	4974      	ldr	r1, [pc, #464]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002848:	4b6f      	ldr	r3, [pc, #444]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002856:	496c      	ldr	r1, [pc, #432]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002878:	4963      	ldr	r1, [pc, #396]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800288c:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289a:	495b      	ldr	r1, [pc, #364]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ae:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	4952      	ldr	r1, [pc, #328]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d0:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	494a      	ldr	r1, [pc, #296]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028f2:	4b45      	ldr	r3, [pc, #276]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	4941      	ldr	r1, [pc, #260]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002914:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	4939      	ldr	r1, [pc, #228]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d028      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002936:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002944:	4930      	ldr	r1, [pc, #192]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002954:	d106      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002956:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	4a2b      	ldr	r2, [pc, #172]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800295c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002960:	60d3      	str	r3, [r2, #12]
 8002962:	e011      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f935 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d04d      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299c:	d108      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80029ae:	e012      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b6:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ce:	490e      	ldr	r1, [pc, #56]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029de:	d106      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
 80029ec:	e020      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f6:	d109      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a02      	ldr	r2, [pc, #8]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	60d3      	str	r3, [r2, #12]
 8002a04:	e014      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f8e1 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d028      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4a:	4965      	ldr	r1, [pc, #404]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a5c:	4b60      	ldr	r3, [pc, #384]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a5f      	ldr	r2, [pc, #380]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a66:	60d3      	str	r3, [r2, #12]
 8002a68:	e011      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a72:	d10c      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f8b2 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01e      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aaa:	494d      	ldr	r1, [pc, #308]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f88d 	bl	8002be4 <RCCEx_PLLSAI1_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ace:	7cfb      	ldrb	r3, [r7, #19]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ae4:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aea:	f023 0204 	bic.w	r2, r3, #4
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af4:	493a      	ldr	r1, [pc, #232]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b08:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b0e:	f023 0218 	bic.w	r2, r3, #24
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	4931      	ldr	r1, [pc, #196]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d035      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7fd ffb2 	bl	8000aa0 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b3e:	e009      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b40:	f7fd ffae 	bl	8000aa0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d902      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	74fb      	strb	r3, [r7, #19]
        break;
 8002b52:	e005      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ef      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d113      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b76:	491a      	ldr	r1, [pc, #104]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3320      	adds	r3, #32
 8002b82:	2102      	movs	r1, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f921 	bl	8002dcc <RCCEx_PLLSAI2_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d017      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bf2:	4b72      	ldr	r3, [pc, #456]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bfe:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d103      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
       ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d142      	bne.n	8002c9c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e03f      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d018      	beq.n	8002c56 <RCCEx_PLLSAI1_Config+0x72>
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d825      	bhi.n	8002c74 <RCCEx_PLLSAI1_Config+0x90>
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d002      	beq.n	8002c32 <RCCEx_PLLSAI1_Config+0x4e>
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d009      	beq.n	8002c44 <RCCEx_PLLSAI1_Config+0x60>
 8002c30:	e020      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c32:	4b62      	ldr	r3, [pc, #392]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c42:	e01a      	b.n	8002c7a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c44:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c54:	e013      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c56:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c62:	4b56      	ldr	r3, [pc, #344]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c72:	e006      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      break;
 8002c78:	e004      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002c8a:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4949      	ldr	r1, [pc, #292]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 8086 	bne.w	8002db0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ca4:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a44      	ldr	r2, [pc, #272]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fd fef6 	bl	8000aa0 <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cb6:	e009      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cb8:	f7fd fef2 	bl	8000aa0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d902      	bls.n	8002ccc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cca:	e005      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ef      	bne.n	8002cb8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d168      	bne.n	8002db0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d113      	bne.n	8002d0c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6892      	ldr	r2, [r2, #8]
 8002cf0:	0211      	lsls	r1, r2, #8
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	06d2      	lsls	r2, r2, #27
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6852      	ldr	r2, [r2, #4]
 8002cfe:	3a01      	subs	r2, #1
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	430a      	orrs	r2, r1
 8002d04:	492d      	ldr	r1, [pc, #180]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	610b      	str	r3, [r1, #16]
 8002d0a:	e02d      	b.n	8002d68 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d115      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6892      	ldr	r2, [r2, #8]
 8002d1e:	0211      	lsls	r1, r2, #8
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6912      	ldr	r2, [r2, #16]
 8002d24:	0852      	lsrs	r2, r2, #1
 8002d26:	3a01      	subs	r2, #1
 8002d28:	0552      	lsls	r2, r2, #21
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6852      	ldr	r2, [r2, #4]
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0112      	lsls	r2, r2, #4
 8002d34:	430a      	orrs	r2, r1
 8002d36:	4921      	ldr	r1, [pc, #132]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	610b      	str	r3, [r1, #16]
 8002d3c:	e014      	b.n	8002d68 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6892      	ldr	r2, [r2, #8]
 8002d4a:	0211      	lsls	r1, r2, #8
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6952      	ldr	r2, [r2, #20]
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0652      	lsls	r2, r2, #25
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6852      	ldr	r2, [r2, #4]
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	430a      	orrs	r2, r1
 8002d62:	4916      	ldr	r1, [pc, #88]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fd fe94 	bl	8000aa0 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d7a:	e009      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d7c:	f7fd fe90 	bl	8000aa0 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d902      	bls.n	8002d90 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d8e:	e005      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d90:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ef      	beq.n	8002d7c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	4904      	ldr	r1, [pc, #16]	; (8002dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	07ff800f 	.word	0x07ff800f
 8002dc4:	ff9f800f 	.word	0xff9f800f
 8002dc8:	f9ff800f 	.word	0xf9ff800f

08002dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dda:	4b72      	ldr	r3, [pc, #456]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00e      	beq.n	8002e04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002de6:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0203 	and.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d103      	bne.n	8002dfe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d142      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	e03f      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d018      	beq.n	8002e3e <RCCEx_PLLSAI2_Config+0x72>
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d825      	bhi.n	8002e5c <RCCEx_PLLSAI2_Config+0x90>
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d002      	beq.n	8002e1a <RCCEx_PLLSAI2_Config+0x4e>
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d009      	beq.n	8002e2c <RCCEx_PLLSAI2_Config+0x60>
 8002e18:	e020      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e1a:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11d      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2a:	e01a      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e2c:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3c:	e013      	b.n	8002e66 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e3e:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e4a:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e5a:	e006      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e60:	e004      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e62:	bf00      	nop
 8002e64:	e002      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4949      	ldr	r1, [pc, #292]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 8086 	bne.w	8002f98 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e8c:	4b45      	ldr	r3, [pc, #276]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a44      	ldr	r2, [pc, #272]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fd fe02 	bl	8000aa0 <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e9e:	e009      	b.n	8002eb4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ea0:	f7fd fdfe 	bl	8000aa0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb2:	e005      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ef      	bne.n	8002ea0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d168      	bne.n	8002f98 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d113      	bne.n	8002ef4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ecc:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6892      	ldr	r2, [r2, #8]
 8002ed8:	0211      	lsls	r1, r2, #8
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	06d2      	lsls	r2, r2, #27
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6852      	ldr	r2, [r2, #4]
 8002ee6:	3a01      	subs	r2, #1
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	430a      	orrs	r2, r1
 8002eec:	492d      	ldr	r1, [pc, #180]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	614b      	str	r3, [r1, #20]
 8002ef2:	e02d      	b.n	8002f50 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d115      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <RCCEx_PLLSAI2_Config+0x1e0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	0211      	lsls	r1, r2, #8
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6912      	ldr	r2, [r2, #16]
 8002f0c:	0852      	lsrs	r2, r2, #1
 8002f0e:	3a01      	subs	r2, #1
 8002f10:	0552      	lsls	r2, r2, #21
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6852      	ldr	r2, [r2, #4]
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	4921      	ldr	r1, [pc, #132]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	614b      	str	r3, [r1, #20]
 8002f24:	e014      	b.n	8002f50 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6892      	ldr	r2, [r2, #8]
 8002f32:	0211      	lsls	r1, r2, #8
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6952      	ldr	r2, [r2, #20]
 8002f38:	0852      	lsrs	r2, r2, #1
 8002f3a:	3a01      	subs	r2, #1
 8002f3c:	0652      	lsls	r2, r2, #25
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6852      	ldr	r2, [r2, #4]
 8002f44:	3a01      	subs	r2, #1
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fd fda0 	bl	8000aa0 <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f62:	e009      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f64:	f7fd fd9c 	bl	8000aa0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	73fb      	strb	r3, [r7, #15]
          break;
 8002f76:	e005      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ef      	beq.n	8002f64 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	07ff800f 	.word	0x07ff800f
 8002fac:	ff9f800f 	.word	0xff9f800f
 8002fb0:	f9ff800f 	.word	0xf9ff800f

08002fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e042      	b.n	800304c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fd fc35 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2224      	movs	r2, #36	; 0x24
 8002fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fb24 	bl	800364c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f825 	bl	8003054 <UART_SetConfig>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e01b      	b.n	800304c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fba3 	bl	8003790 <UART_CheckIdleState>
 800304a:	4603      	mov	r3, r0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b08c      	sub	sp, #48	; 0x30
 800305a:	af00      	add	r7, sp, #0
 800305c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	431a      	orrs	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4313      	orrs	r3, r2
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4baa      	ldr	r3, [pc, #680]	; (800332c <UART_SetConfig+0x2d8>)
 8003084:	4013      	ands	r3, r2
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800308c:	430b      	orrs	r3, r1
 800308e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a9f      	ldr	r2, [pc, #636]	; (8003330 <UART_SetConfig+0x2dc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030bc:	4313      	orrs	r3, r2
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80030ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f023 010f 	bic.w	r1, r3, #15
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a90      	ldr	r2, [pc, #576]	; (8003334 <UART_SetConfig+0x2e0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d125      	bne.n	8003144 <UART_SetConfig+0xf0>
 80030f8:	4b8f      	ldr	r3, [pc, #572]	; (8003338 <UART_SetConfig+0x2e4>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b03      	cmp	r3, #3
 8003104:	d81a      	bhi.n	800313c <UART_SetConfig+0xe8>
 8003106:	a201      	add	r2, pc, #4	; (adr r2, 800310c <UART_SetConfig+0xb8>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	0800311d 	.word	0x0800311d
 8003110:	0800312d 	.word	0x0800312d
 8003114:	08003125 	.word	0x08003125
 8003118:	08003135 	.word	0x08003135
 800311c:	2301      	movs	r3, #1
 800311e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003122:	e116      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003124:	2302      	movs	r3, #2
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312a:	e112      	b.n	8003352 <UART_SetConfig+0x2fe>
 800312c:	2304      	movs	r3, #4
 800312e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003132:	e10e      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003134:	2308      	movs	r3, #8
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313a:	e10a      	b.n	8003352 <UART_SetConfig+0x2fe>
 800313c:	2310      	movs	r3, #16
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003142:	e106      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a7c      	ldr	r2, [pc, #496]	; (800333c <UART_SetConfig+0x2e8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d138      	bne.n	80031c0 <UART_SetConfig+0x16c>
 800314e:	4b7a      	ldr	r3, [pc, #488]	; (8003338 <UART_SetConfig+0x2e4>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d82d      	bhi.n	80031b8 <UART_SetConfig+0x164>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x110>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003199 	.word	0x08003199
 8003168:	080031b9 	.word	0x080031b9
 800316c:	080031b9 	.word	0x080031b9
 8003170:	080031b9 	.word	0x080031b9
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031b9 	.word	0x080031b9
 800317c:	080031b9 	.word	0x080031b9
 8003180:	080031b9 	.word	0x080031b9
 8003184:	080031a1 	.word	0x080031a1
 8003188:	080031b9 	.word	0x080031b9
 800318c:	080031b9 	.word	0x080031b9
 8003190:	080031b9 	.word	0x080031b9
 8003194:	080031b1 	.word	0x080031b1
 8003198:	2300      	movs	r3, #0
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319e:	e0d8      	b.n	8003352 <UART_SetConfig+0x2fe>
 80031a0:	2302      	movs	r3, #2
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a6:	e0d4      	b.n	8003352 <UART_SetConfig+0x2fe>
 80031a8:	2304      	movs	r3, #4
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ae:	e0d0      	b.n	8003352 <UART_SetConfig+0x2fe>
 80031b0:	2308      	movs	r3, #8
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b6:	e0cc      	b.n	8003352 <UART_SetConfig+0x2fe>
 80031b8:	2310      	movs	r3, #16
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031be:	e0c8      	b.n	8003352 <UART_SetConfig+0x2fe>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <UART_SetConfig+0x2ec>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d125      	bne.n	8003216 <UART_SetConfig+0x1c2>
 80031ca:	4b5b      	ldr	r3, [pc, #364]	; (8003338 <UART_SetConfig+0x2e4>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031d4:	2b30      	cmp	r3, #48	; 0x30
 80031d6:	d016      	beq.n	8003206 <UART_SetConfig+0x1b2>
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d818      	bhi.n	800320e <UART_SetConfig+0x1ba>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d00a      	beq.n	80031f6 <UART_SetConfig+0x1a2>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d814      	bhi.n	800320e <UART_SetConfig+0x1ba>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <UART_SetConfig+0x19a>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d008      	beq.n	80031fe <UART_SetConfig+0x1aa>
 80031ec:	e00f      	b.n	800320e <UART_SetConfig+0x1ba>
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f4:	e0ad      	b.n	8003352 <UART_SetConfig+0x2fe>
 80031f6:	2302      	movs	r3, #2
 80031f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031fc:	e0a9      	b.n	8003352 <UART_SetConfig+0x2fe>
 80031fe:	2304      	movs	r3, #4
 8003200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003204:	e0a5      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003206:	2308      	movs	r3, #8
 8003208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320c:	e0a1      	b.n	8003352 <UART_SetConfig+0x2fe>
 800320e:	2310      	movs	r3, #16
 8003210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003214:	e09d      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4a      	ldr	r2, [pc, #296]	; (8003344 <UART_SetConfig+0x2f0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d125      	bne.n	800326c <UART_SetConfig+0x218>
 8003220:	4b45      	ldr	r3, [pc, #276]	; (8003338 <UART_SetConfig+0x2e4>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800322a:	2bc0      	cmp	r3, #192	; 0xc0
 800322c:	d016      	beq.n	800325c <UART_SetConfig+0x208>
 800322e:	2bc0      	cmp	r3, #192	; 0xc0
 8003230:	d818      	bhi.n	8003264 <UART_SetConfig+0x210>
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d00a      	beq.n	800324c <UART_SetConfig+0x1f8>
 8003236:	2b80      	cmp	r3, #128	; 0x80
 8003238:	d814      	bhi.n	8003264 <UART_SetConfig+0x210>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <UART_SetConfig+0x1f0>
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d008      	beq.n	8003254 <UART_SetConfig+0x200>
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x210>
 8003244:	2300      	movs	r3, #0
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324a:	e082      	b.n	8003352 <UART_SetConfig+0x2fe>
 800324c:	2302      	movs	r3, #2
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003252:	e07e      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325a:	e07a      	b.n	8003352 <UART_SetConfig+0x2fe>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003262:	e076      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326a:	e072      	b.n	8003352 <UART_SetConfig+0x2fe>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a35      	ldr	r2, [pc, #212]	; (8003348 <UART_SetConfig+0x2f4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d12a      	bne.n	80032cc <UART_SetConfig+0x278>
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <UART_SetConfig+0x2e4>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003284:	d01a      	beq.n	80032bc <UART_SetConfig+0x268>
 8003286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328a:	d81b      	bhi.n	80032c4 <UART_SetConfig+0x270>
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d00c      	beq.n	80032ac <UART_SetConfig+0x258>
 8003292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003296:	d815      	bhi.n	80032c4 <UART_SetConfig+0x270>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <UART_SetConfig+0x250>
 800329c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a0:	d008      	beq.n	80032b4 <UART_SetConfig+0x260>
 80032a2:	e00f      	b.n	80032c4 <UART_SetConfig+0x270>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032aa:	e052      	b.n	8003352 <UART_SetConfig+0x2fe>
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b2:	e04e      	b.n	8003352 <UART_SetConfig+0x2fe>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ba:	e04a      	b.n	8003352 <UART_SetConfig+0x2fe>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032c2:	e046      	b.n	8003352 <UART_SetConfig+0x2fe>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ca:	e042      	b.n	8003352 <UART_SetConfig+0x2fe>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <UART_SetConfig+0x2dc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d13a      	bne.n	800334c <UART_SetConfig+0x2f8>
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <UART_SetConfig+0x2e4>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e4:	d01a      	beq.n	800331c <UART_SetConfig+0x2c8>
 80032e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ea:	d81b      	bhi.n	8003324 <UART_SetConfig+0x2d0>
 80032ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f0:	d00c      	beq.n	800330c <UART_SetConfig+0x2b8>
 80032f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f6:	d815      	bhi.n	8003324 <UART_SetConfig+0x2d0>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <UART_SetConfig+0x2b0>
 80032fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003300:	d008      	beq.n	8003314 <UART_SetConfig+0x2c0>
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x2d0>
 8003304:	2300      	movs	r3, #0
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330a:	e022      	b.n	8003352 <UART_SetConfig+0x2fe>
 800330c:	2302      	movs	r3, #2
 800330e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003312:	e01e      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003314:	2304      	movs	r3, #4
 8003316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800331a:	e01a      	b.n	8003352 <UART_SetConfig+0x2fe>
 800331c:	2308      	movs	r3, #8
 800331e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003322:	e016      	b.n	8003352 <UART_SetConfig+0x2fe>
 8003324:	2310      	movs	r3, #16
 8003326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800332a:	e012      	b.n	8003352 <UART_SetConfig+0x2fe>
 800332c:	cfff69f3 	.word	0xcfff69f3
 8003330:	40008000 	.word	0x40008000
 8003334:	40013800 	.word	0x40013800
 8003338:	40021000 	.word	0x40021000
 800333c:	40004400 	.word	0x40004400
 8003340:	40004800 	.word	0x40004800
 8003344:	40004c00 	.word	0x40004c00
 8003348:	40005000 	.word	0x40005000
 800334c:	2310      	movs	r3, #16
 800334e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4aae      	ldr	r2, [pc, #696]	; (8003610 <UART_SetConfig+0x5bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	f040 8097 	bne.w	800348c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800335e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003362:	2b08      	cmp	r3, #8
 8003364:	d823      	bhi.n	80033ae <UART_SetConfig+0x35a>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <UART_SetConfig+0x318>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	08003391 	.word	0x08003391
 8003370:	080033af 	.word	0x080033af
 8003374:	08003399 	.word	0x08003399
 8003378:	080033af 	.word	0x080033af
 800337c:	0800339f 	.word	0x0800339f
 8003380:	080033af 	.word	0x080033af
 8003384:	080033af 	.word	0x080033af
 8003388:	080033af 	.word	0x080033af
 800338c:	080033a7 	.word	0x080033a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7fe ffd0 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003396:	e010      	b.n	80033ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003398:	4b9e      	ldr	r3, [pc, #632]	; (8003614 <UART_SetConfig+0x5c0>)
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800339c:	e00d      	b.n	80033ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339e:	f7fe ff31 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033a4:	e009      	b.n	80033ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033ac:	e005      	b.n	80033ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8130 	beq.w	8003622 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	4a94      	ldr	r2, [pc, #592]	; (8003618 <UART_SetConfig+0x5c4>)
 80033c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033cc:	461a      	mov	r2, r3
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d305      	bcc.n	80033f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d903      	bls.n	80033fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033f8:	e113      	b.n	8003622 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	2200      	movs	r2, #0
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	60fa      	str	r2, [r7, #12]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	4a84      	ldr	r2, [pc, #528]	; (8003618 <UART_SetConfig+0x5c4>)
 8003408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800340c:	b29b      	uxth	r3, r3
 800340e:	2200      	movs	r2, #0
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003418:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800341c:	f7fc fef8 	bl	8000210 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	020b      	lsls	r3, r1, #8
 8003432:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003436:	0202      	lsls	r2, r0, #8
 8003438:	6979      	ldr	r1, [r7, #20]
 800343a:	6849      	ldr	r1, [r1, #4]
 800343c:	0849      	lsrs	r1, r1, #1
 800343e:	2000      	movs	r0, #0
 8003440:	460c      	mov	r4, r1
 8003442:	4605      	mov	r5, r0
 8003444:	eb12 0804 	adds.w	r8, r2, r4
 8003448:	eb43 0905 	adc.w	r9, r3, r5
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	469a      	mov	sl, r3
 8003454:	4693      	mov	fp, r2
 8003456:	4652      	mov	r2, sl
 8003458:	465b      	mov	r3, fp
 800345a:	4640      	mov	r0, r8
 800345c:	4649      	mov	r1, r9
 800345e:	f7fc fed7 	bl	8000210 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4613      	mov	r3, r2
 8003468:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003470:	d308      	bcc.n	8003484 <UART_SetConfig+0x430>
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003478:	d204      	bcs.n	8003484 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a3a      	ldr	r2, [r7, #32]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	e0ce      	b.n	8003622 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800348a:	e0ca      	b.n	8003622 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003494:	d166      	bne.n	8003564 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800349a:	2b08      	cmp	r3, #8
 800349c:	d827      	bhi.n	80034ee <UART_SetConfig+0x49a>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0x450>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	080034d9 	.word	0x080034d9
 80034b0:	080034ef 	.word	0x080034ef
 80034b4:	080034df 	.word	0x080034df
 80034b8:	080034ef 	.word	0x080034ef
 80034bc:	080034ef 	.word	0x080034ef
 80034c0:	080034ef 	.word	0x080034ef
 80034c4:	080034e7 	.word	0x080034e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c8:	f7fe ff34 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034ce:	e014      	b.n	80034fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d0:	f7fe ff46 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80034d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034d6:	e010      	b.n	80034fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d8:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <UART_SetConfig+0x5c0>)
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034dc:	e00d      	b.n	80034fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034de:	f7fe fe91 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80034e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034e4:	e009      	b.n	80034fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034ec:	e005      	b.n	80034fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8090 	beq.w	8003622 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	4a44      	ldr	r2, [pc, #272]	; (8003618 <UART_SetConfig+0x5c4>)
 8003508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800350c:	461a      	mov	r2, r3
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	fbb3 f3f2 	udiv	r3, r3, r2
 8003514:	005a      	lsls	r2, r3, #1
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	441a      	add	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	2b0f      	cmp	r3, #15
 800352c:	d916      	bls.n	800355c <UART_SetConfig+0x508>
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d212      	bcs.n	800355c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f023 030f 	bic.w	r3, r3, #15
 800353e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	b29a      	uxth	r2, r3
 800354c:	8bfb      	ldrh	r3, [r7, #30]
 800354e:	4313      	orrs	r3, r2
 8003550:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	8bfa      	ldrh	r2, [r7, #30]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	e062      	b.n	8003622 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003562:	e05e      	b.n	8003622 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003568:	2b08      	cmp	r3, #8
 800356a:	d828      	bhi.n	80035be <UART_SetConfig+0x56a>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0x520>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003599 	.word	0x08003599
 8003578:	080035a1 	.word	0x080035a1
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035bf 	.word	0x080035bf
 8003584:	080035af 	.word	0x080035af
 8003588:	080035bf 	.word	0x080035bf
 800358c:	080035bf 	.word	0x080035bf
 8003590:	080035bf 	.word	0x080035bf
 8003594:	080035b7 	.word	0x080035b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003598:	f7fe fecc 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 800359c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800359e:	e014      	b.n	80035ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7fe fede 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035a6:	e010      	b.n	80035ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <UART_SetConfig+0x5c0>)
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035ac:	e00d      	b.n	80035ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ae:	f7fe fe29 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80035b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035b4:	e009      	b.n	80035ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035bc:	e005      	b.n	80035ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035c8:	bf00      	nop
    }

    if (pclk != 0U)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d028      	beq.n	8003622 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <UART_SetConfig+0x5c4>)
 80035d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035da:	461a      	mov	r2, r3
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	fbb3 f2f2 	udiv	r2, r3, r2
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	441a      	add	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d910      	bls.n	800361c <UART_SetConfig+0x5c8>
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d20c      	bcs.n	800361c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	b29a      	uxth	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	e009      	b.n	8003622 <UART_SetConfig+0x5ce>
 800360e:	bf00      	nop
 8003610:	40008000 	.word	0x40008000
 8003614:	00f42400 	.word	0x00f42400
 8003618:	08003d84 	.word	0x08003d84
      }
      else
      {
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2201      	movs	r2, #1
 8003626:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2201      	movs	r2, #1
 800362e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800363e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003642:	4618      	mov	r0, r3
 8003644:	3730      	adds	r7, #48	; 0x30
 8003646:	46bd      	mov	sp, r7
 8003648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800364c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01a      	beq.n	8003762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374a:	d10a      	bne.n	8003762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b098      	sub	sp, #96	; 0x60
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a0:	f7fd f97e 	bl	8000aa0 <HAL_GetTick>
 80037a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d12f      	bne.n	8003814 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037bc:	2200      	movs	r2, #0
 80037be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f88e 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d022      	beq.n	8003814 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e2:	653b      	str	r3, [r7, #80]	; 0x50
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ec:	647b      	str	r3, [r7, #68]	; 0x44
 80037ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e6      	bne.n	80037ce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e063      	b.n	80038dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b04      	cmp	r3, #4
 8003820:	d149      	bne.n	80038b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003822:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382a:	2200      	movs	r2, #0
 800382c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f857 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03c      	beq.n	80038b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	623b      	str	r3, [r7, #32]
   return(result);
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
 800385c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e6      	bne.n	800383c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	60fb      	str	r3, [r7, #12]
   return(result);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	64bb      	str	r3, [r7, #72]	; 0x48
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800388e:	61fa      	str	r2, [r7, #28]
 8003890:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	617b      	str	r3, [r7, #20]
   return(result);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e5      	bne.n	800386e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e012      	b.n	80038dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3758      	adds	r7, #88	; 0x58
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f4:	e04f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d04b      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd f8cf 	bl	8000aa0 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <UART_WaitOnFlagUntilTimeout+0x30>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e04e      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d037      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d034      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d031      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d110      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f838 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2208      	movs	r2, #8
 8003952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e029      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	d111      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800397a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f81e 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e00f      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d0a0      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b095      	sub	sp, #84	; 0x54
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	643b      	str	r3, [r7, #64]	; 0x40
 80039e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e3      	bne.n	80039f8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d118      	bne.n	8003a6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0310 	bic.w	r3, r3, #16
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	613b      	str	r3, [r7, #16]
   return(result);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e6      	bne.n	8003a38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003a7e:	bf00      	nop
 8003a80:	3754      	adds	r7, #84	; 0x54
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e027      	b.n	8003af0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ace:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e02d      	b.n	8003b70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	; 0x24
 8003b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f84f 	bl	8003bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e02d      	b.n	8003bec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f811 	bl	8003bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c14:	e031      	b.n	8003c7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c16:	2308      	movs	r3, #8
 8003c18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	0e5b      	lsrs	r3, r3, #25
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	0f5b      	lsrs	r3, r3, #29
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]
 8003c40:	7b3a      	ldrb	r2, [r7, #12]
 8003c42:	4911      	ldr	r1, [pc, #68]	; (8003c88 <UARTEx_SetNbDataToProcess+0x94>)
 8003c44:	5c8a      	ldrb	r2, [r1, r2]
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c4a:	7b3a      	ldrb	r2, [r7, #12]
 8003c4c:	490f      	ldr	r1, [pc, #60]	; (8003c8c <UARTEx_SetNbDataToProcess+0x98>)
 8003c4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	7b7a      	ldrb	r2, [r7, #13]
 8003c60:	4909      	ldr	r1, [pc, #36]	; (8003c88 <UARTEx_SetNbDataToProcess+0x94>)
 8003c62:	5c8a      	ldrb	r2, [r1, r2]
 8003c64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c68:	7b7a      	ldrb	r2, [r7, #13]
 8003c6a:	4908      	ldr	r1, [pc, #32]	; (8003c8c <UARTEx_SetNbDataToProcess+0x98>)
 8003c6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	08003d9c 	.word	0x08003d9c
 8003c8c:	08003da4 	.word	0x08003da4

08003c90 <memset>:
 8003c90:	4402      	add	r2, r0
 8003c92:	4603      	mov	r3, r0
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d100      	bne.n	8003c9a <memset+0xa>
 8003c98:	4770      	bx	lr
 8003c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c9e:	e7f9      	b.n	8003c94 <memset+0x4>

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4d0d      	ldr	r5, [pc, #52]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca4:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca6:	1b64      	subs	r4, r4, r5
 8003ca8:	10a4      	asrs	r4, r4, #2
 8003caa:	2600      	movs	r6, #0
 8003cac:	42a6      	cmp	r6, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	4d0b      	ldr	r5, [pc, #44]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ce4 <__libc_init_array+0x44>)
 8003cb4:	f000 f826 	bl	8003d04 <_init>
 8003cb8:	1b64      	subs	r4, r4, r5
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	2600      	movs	r6, #0
 8003cbe:	42a6      	cmp	r6, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc8:	4798      	blx	r3
 8003cca:	3601      	adds	r6, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd2:	4798      	blx	r3
 8003cd4:	3601      	adds	r6, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	08003db4 	.word	0x08003db4
 8003cdc:	08003db4 	.word	0x08003db4
 8003ce0:	08003db4 	.word	0x08003db4
 8003ce4:	08003db8 	.word	0x08003db8

08003ce8 <memcpy>:
 8003ce8:	440a      	add	r2, r1
 8003cea:	4291      	cmp	r1, r2
 8003cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cf0:	d100      	bne.n	8003cf4 <memcpy+0xc>
 8003cf2:	4770      	bx	lr
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfe:	4291      	cmp	r1, r2
 8003d00:	d1f9      	bne.n	8003cf6 <memcpy+0xe>
 8003d02:	bd10      	pop	{r4, pc}

08003d04 <_init>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr

08003d10 <_fini>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr
